package com.taxtion.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TaxContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","013593505050565b60006020828403121562000fe7578081fd5b5035919050565b60006020828403121562001000578081fd5b5051919050565b600080604083850312156200101a578182fd5b50508035926020909101359150565b600080600080608085870312156200103f578384fd5b8435935060208501359250604085013567ffffffffffffffff81111562001064578283fd5b620010728782880162000e31565b949793965093946060013593505050565b60006020828403121562001095578081fd5b81516003811062000efd578182fd5b600080600060608486031215620010b9578283fd5b833567ffffffffffffffff80821115620010d1578485fd5b620010df8783880162000e31565b94506020860135915080821115620010f5578384fd5b620011038783880162000e31565b9350604086013591508082111562001119578283fd5b50620011288682870162000e31565b9150509250925092565b60008060006060848603121562001147578283fd5b835167ffffffffffffffff808211156200115f578485fd5b6200116d8783880162000e8a565b9450602086015191508082111562001183578384fd5b620011918783880162000e8a565b93506040860151915080821115620011a7578283fd5b50620011288682870162000e8a565b600060208284031215620011c8578081fd5b815167ffffffffffffffff80821115620011e0578283fd5b610100918401808603831315620011f5578384fd5b620012008362001603565b6200120c878362000e14565b81526200121d876020840162000e14565b602082015260408201516040820152606082015193508284111562001240578485fd5b6200124e8785840162000e8a565b60608201526080820151608082015260a082015160a0820152620012768760c0840162000e21565b60c082015260e08201519350828411156200128f578485fd5b6200129d8785840162000e8a565b60e08201529695505050505050565b6001600160a01b03169052565b60038110620012c457fe5b9052565b60008151808452620012e28160208601602086016200165c565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038881168252871660208201526040810186905260e0606082018190526000906200133f90830187620012c8565b8560808401528460a084015282810360c08401526200135f8185620012c8565b9a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620013a75783518352928401929184019160010162001389565b50909695505050505050565b901515815260200190565b90815260200190565b60208101620004d58284620012b9565b600060608252620013ec6060830186620012c8565b8281036020840152620014008186620012c8565b8381036040850152620014148186620012c8565b979650505050505050565b6020808252600c908201526b53656e64206661696c65643160a01b604082015260600190565b60208082526010908201526f496c6c6567616c20416464726573732160801b604082015260600190565b6020808252600890820152671b9bdd199bdd5b9960c21b604082015260600190565b6020808252601d908201527f48617320736f6d6520696e766f69636573206e6f74207265736f6c7665000000604082015260600190565b6020808252600c908201526b29b2b732103330b4b632b21960a11b604082015260600190565b602080825260079082015266185c1c1bdd995960ca1b604082015260600190565b60208082526006908201526577726f6e673160d01b604082015260600190565b60006020825262001541835162001650565b602083015260208301516200155a6040840182620012ac565b5060408301516060830152606083015161010080608085015262001583610120850183620012c8565b608086015160a086015260a086015160c086015260c08601519250620015ad60e0860184620012b9565b60e0860151858203601f1901838701529250620015cb8184620012c8565b9695505050505050565b600085825260806020830152620015f06080830186620012c8565b6040830194909452506060015292915050565b60405181810167ffffffffffffffff811182821017156200162357600080fd5b604052919050565b600067ffffffffffffffff82111562001642578081fd5b50601f01601f191660200190565b6001600160a01b031690565b60005b83811015620016795781810151838201526020016200165f565b83811115620004455750506000910152565b6001600160a01b0381168114620009a557600080fdfe60806040523480156200001157600080fd5b5060405162000e0238038062000e028339810160408190526200003491620002d4565b81831115620000605760405162461bcd60e51b81526004016200005790620003a3565b60405180910390fd5b600080546001600160a01b03191633179055620000856001600160e01b036200015616565b600155600280546001600160a01b03808a166001600160a01b031992831617909255600380549289169290911691909117905560048590558351620000d290600590602087019062000193565b50600683905560078290558051620000f290600990602084019062000193565b50856001600160a01b0316876001600160a01b03166001547f9a4183fd6c7487f5c95cd540778dd2ec6ab302f45f612fd7436e009f700df9a888888888604051620001419493929190620003c7565b60405180910390a45050505050505062000445565b60008042336001430340604051602001620001749392919062000380565b60408051601f1981840301815291905280516020909101209150505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d657805160ff191683800117855562000206565b8280016001018555821562000206579182015b8281111562000206578251825591602001919060010190620001e9565b506200021492915062000218565b5090565b6200019091905b808211156200021457600081556001016200021f565b80516001600160a01b03811681146200024d57600080fd5b92915050565b600082601f83011262000264578081fd5b81516001600160401b03808211156200027b578283fd5b604051601f8301601f1916810160200182811182821017156200029c578485fd5b604052828152925082848301602001861015620002b857600080fd5b620002cb83602083016020880162000412565b50505092915050565b600080600080600080600060e0888a031215620002ef578283fd5b620002fb898962000235565b96506200030c8960208a0162000235565b604089015160608a015191975095506001600160401b038082111562000330578485fd5b6200033e8b838c0162000253565b955060808a0151945060a08a0151935060c08a015191508082111562000362578283fd5b50620003718a828b0162000253565b91505092959891949750929550565b92835260609190911b6001600160601b0319166020830152603482015260540190565b6020808252600a90820152696461746520776f726e6760b01b604082015260600190565b6000858252608060208301528451806080840152620003ee8160a085016020890162000412565b604083019490945250606081019190915260a0601f909201601f1916010192915050565b60005b838110156200042f57818101518382015260200162000415565b838111156200043f576000848401525b50505050565b6109ad80620004556000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370c862861161006657806370c862861461010f5780637cd87ba2146101175780638da5cb5b1461011f578063cdee130414610134578063e2f8b619146101475761009e565b8063039f3b1e146100a357806308109884146100b85780633263e78b146100d657806339465c02146100de5780634e69d560146100fa575b600080fd5b6100b66100b136600461066a565b61015c565b005b6100c0610228565b6040516100cd9190610809565b60405180910390f35b6100c061022f565b6100e6610235565b6040516100cd989796959493929190610797565b610102610388565b6040516100cd9190610812565b6100c0610391565b6100c0610397565b61012761039d565b6040516100cd9190610783565b6100b6610142366004610644565b6103ac565b61014f6103cd565b6040516100cd91906108a3565b6000546001600160a01b0316331461018f5760405162461bcd60e51b815260040161018690610826565b60405180910390fd5b6000610199610388565b60028111156101a457fe5b146101c15760405162461bcd60e51b81526004016101869061086c565b600484905582516101d9906005906020860190610568565b50600682905560078190556040517f9f636637cc40f5478b2ef6a6eb8c172d9d1231999e42c60b41c5d1e3808768c49061021a90869086908690869061093f565b60405180910390a150505050565b6007545b90565b60015490565b600280546003546004546005805460408051602061010060018516150260001901909316889004601f81018490048402820184019092528181526001600160a01b03968716979690951695939492918301828280156102d55780601f106102aa576101008083540402835291602001916102d5565b820191906000526020600020905b8154815290600101906020018083116102b857829003601f168201915b505050600484015460058501546006860154600787018054604080516020601f600260001960018716156101000201909516949094049384018190048102820181019092528281529899959894975060ff9093169550909183018282801561037e5780601f106103535761010080835404028352916020019161037e565b820191906000526020600020905b81548152906001019060200180831161036157829003601f168201915b5050505050905088565b60085460ff1690565b60015481565b60065490565b6000546001600160a01b031681565b6008805482919060ff191660018360028111156103c557fe5b021790555050565b6103d56105e6565b604080516101008082018352600280546001600160a01b039081168452600354166020808501919091526004548486015260058054865160018216159095026000190116839004601f810183900483028501830190965285845293949193606086019392909183018282801561048c5780601f106104615761010080835404028352916020019161048c565b820191906000526020600020905b81548152906001019060200180831161046f57829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff1660028111156104c157fe5b60028111156104cc57fe5b81526007820180546040","","5b6040528281529250828483016020018610156108cb57600080fd5b8260208601602083013760006020848301015250505092915050565b6000806000606084860312156108fb578283fd5b833567ffffffffffffffff80821115610912578485fd5b61091e87838801610869565b94506020860135915080821115610933578384fd5b61093f87838801610869565b93506040860135915080821115610954578283fd5b5061096186828701610869565b9150509250925092565b60006020828403121561097c578081fd5b5035919050565b60008151808452815b818110156109a85760208185018101518683018201520161098c565b818111156109b95782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b600060408252610a006040830185610983565b8281036020840152610a128185610983565b95945050505050565b600060608252610a2e6060830186610983565b8281036020840152610a408186610983565b8381036040850152610a528186610983565b979650505050505050565b60208082526026908201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60408201526531ba34b7b71760d11b606082015260800190565b60208082526017908201527f5461787061796572206e6f742072656769737465722121000000000000000000604082015260600190565b9081526020019056fea26469706673582212204474aa17a014caef14a32dc9033ec7d1c0fd606bac5eada807962bc81023ec2464736f6c634300060a0033a2646970667358221220dddf498c0e4dd9cc404970488b208756d72dbc2f5562740047b34f7ae757b12764736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","073657fe5b9052565b60008151808452815b8181101561075f57602081850181015186830182015201610743565b818111156107705782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0389811682528816602082015260408101879052610100606082018190526000906107cd8382018961073a565b8760808501528660a0850152600386106107e357fe5b8560c085015283810360e08501526107fb818661073a565b9c9b505050505050505050505050565b90815260200190565b60208101610822828461072c565b92915050565b60208082526019908201527f696e766f69636520686173206265656e20617070726f76656400000000000000604082015260600190565b60208082526026908201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60408201526531ba34b7b71760d11b606082015260800190565b6000602082526108b5835161096d565b602083015260208301516108cc604084018261071f565b506040830151606083015260608301516101008060808501526108f361012085018361073a565b608086015160a086015260a086015160c086015260c0860151925061091b60e086018461072c565b60e0860151858203601f1901838701529250610937818461073a565b9695505050505050565b60008582526080602083015261095a608083018661073a565b6040830194909452506060015292915050565b6001600160a01b03169056fea26469706673582212205015d8b920b6496b27784d61be14c8a313d2277f78f310eb2695ac72f51c721e64736f6c634300060a0033a264697066735822122029c43ecf477dc193752e67a5b1e8935b58c1cbcfcabf3733edc21671a0cd848f64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_taxID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contactInfo\",\"type\":\"string\"}],\"name\":\"AddPayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_InvoiceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApprovalReimbursement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_InvoiceId\",\"type\":\"bytes32\"}],\"name\":\"DealInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeletePayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvoiceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvoiceIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_taxID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contactInfo\",\"type\":\"string\"}],\"name\":\"ModifyPayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_InvoiceId\",\"type\":\"bytes32\"}],\"name\":\"ReimbursementRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Taxation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_creationDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_auditInfo\",\"type\":\"string\"}],\"name\":\"createInvoice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_InvoiceId\",\"type\":\"bytes32\"}],\"name\":\"getInvoice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"enum Invoice.InvoiceStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"auditInfo\",\"type\":\"string\"}],\"internalType\":\"struct Invoice.InvoiceInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvoiceIdArr\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_InvoiceId\",\"type\":\"bytes32\"}],\"name\":\"getInvoiceStatus\",\"outputs\":[{\"internalType\":\"enum Invoice.InvoiceStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPayers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invoices\",\"outputs\":[{\"internalType\":\"contract Invoice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_InvoiceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_describtion\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_creationDate\",\"type\":\"uint256\"}],\"name\":\"modifyInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payers\",\"outputs\":[{\"internalType\":\"contract Payer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reimbursementRequests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDPAYERS = "AddPayers";

    public static final String FUNC_APPROVALREIMBURSEMENT = "ApprovalReimbursement";

    public static final String FUNC_DEALINVOICE = "DealInvoice";

    public static final String FUNC_DELETEPAYERS = "DeletePayers";

    public static final String FUNC_INVOICEID = "InvoiceId";

    public static final String FUNC_INVOICEIDS = "InvoiceIds";

    public static final String FUNC_MODIFYPAYERS = "ModifyPayers";

    public static final String FUNC_REIMBURSEMENTREQUESTS = "ReimbursementRequests";

    public static final String FUNC_TAXATION = "Taxation";

    public static final String FUNC_CREATEINVOICE = "createInvoice";

    public static final String FUNC_GETINVOICE = "getInvoice";

    public static final String FUNC_GETINVOICEIDARR = "getInvoiceIdArr";

    public static final String FUNC_GETINVOICESTATUS = "getInvoiceStatus";

    public static final String FUNC_GETPAYERS = "getPayers";

    public static final String FUNC_INVOICES = "invoices";

    public static final String FUNC_ISREQUEST = "isRequest";

    public static final String FUNC_MODIFYINVOICE = "modifyInvoice";

    public static final String FUNC_PAYERS = "payers";



    protected TaxContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt AddPayers(String _name, String _taxID, String _contactInfo) {
        final Function function = new Function(
                FUNC_ADDPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_taxID),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_contactInfo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] AddPayers(String _name, String _taxID, String _contactInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_taxID),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_contactInfo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPayers(String _name, String _taxID, String _contactInfo) {
        final Function function = new Function(
                FUNC_ADDPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_taxID),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_contactInfo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getAddPayersInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPAYERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public TransactionReceipt ApprovalReimbursement(byte[] _InvoiceId, BigInteger amount) {
        final Function function = new Function(
                FUNC_APPROVALREIMBURSEMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] ApprovalReimbursement(byte[] _InvoiceId, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVALREIMBURSEMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprovalReimbursement(byte[] _InvoiceId, BigInteger amount) {
        final Function function = new Function(
                FUNC_APPROVALREIMBURSEMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], BigInteger> getApprovalReimbursementInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVALREIMBURSEMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt DealInvoice(byte[] _InvoiceId) {
        final Function function = new Function(
                FUNC_DEALINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] DealInvoice(byte[] _InvoiceId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEALINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDealInvoice(byte[] _InvoiceId) {
        final Function function = new Function(
                FUNC_DEALINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDealInvoiceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEALINVOICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
        );
    }

    public TransactionReceipt DeletePayers() {
        final Function function = new Function(
                FUNC_DELETEPAYERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] DeletePayers(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEPAYERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeletePayers() {
        final Function function = new Function(
                FUNC_DELETEPAYERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public byte[] InvoiceId(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_INVOICEID,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] InvoiceIds(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_INVOICEIDS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt ModifyPayers(String _name, String _taxID, String _contactInfo) {
        final Function function = new Function(
                FUNC_MODIFYPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_taxID),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_contactInfo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] ModifyPayers(String _name, String _taxID, String _contactInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_taxID),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_contactInfo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyPayers(String _name, String _taxID, String _contactInfo) {
        final Function function = new Function(
                FUNC_MODIFYPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_taxID),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_contactInfo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getModifyPayersInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPAYERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public TransactionReceipt ReimbursementRequests(byte[] _InvoiceId) {
        final Function function = new Function(
                FUNC_REIMBURSEMENTREQUESTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] ReimbursementRequests(byte[] _InvoiceId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REIMBURSEMENTREQUESTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReimbursementRequests(byte[] _InvoiceId) {
        final Function function = new Function(
                FUNC_REIMBURSEMENTREQUESTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getReimbursementRequestsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REIMBURSEMENTREQUESTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
        );
    }

    public String Taxation() throws ContractException {
        final Function function = new Function(FUNC_TAXATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt createInvoice(String _creator, String _recipient, BigInteger _totalAmount, String _description, BigInteger _creationDate, String _auditInfo) {
        final Function function = new Function(
                FUNC_CREATEINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_recipient),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalAmount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_creationDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_auditInfo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createInvoice(String _creator, String _recipient, BigInteger _totalAmount, String _description, BigInteger _creationDate, String _auditInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_recipient),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalAmount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_creationDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_auditInfo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateInvoice(String _creator, String _recipient, BigInteger _totalAmount, String _description, BigInteger _creationDate, String _auditInfo) {
        final Function function = new Function(
                FUNC_CREATEINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(_recipient),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalAmount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_creationDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_auditInfo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, BigInteger, String, BigInteger, String> getCreateInvoiceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEINVOICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, BigInteger, String, BigInteger, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (String) results.get(5).getValue()
        );
    }

    public Tuple1<byte[]> getCreateInvoiceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEINVOICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
        );
    }

    public Invoice.InvoiceInfo getInvoice(byte[] _InvoiceId) throws ContractException {
        final Function function = new Function(FUNC_GETINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Invoice.InvoiceInfo>() {}));
        return executeCallWithSingleValueReturn(function, Invoice.InvoiceInfo.class);
    }

    public List getInvoiceIdArr() throws ContractException {
        final Function function = new Function(FUNC_GETINVOICEIDARR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getInvoiceStatus(byte[] _InvoiceId) throws ContractException {
        final Function function = new Function(FUNC_GETINVOICESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getPayers(String _address) throws ContractException {
        final Function function = new Function(FUNC_GETPAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public String invoices(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_INVOICES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isRequest(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_ISREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt modifyInvoice(byte[] _InvoiceId, BigInteger _totalAmount, String _describtion, BigInteger _creationDate) {
        final Function function = new Function(
                FUNC_MODIFYINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalAmount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_describtion),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_creationDate)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyInvoice(byte[] _InvoiceId, BigInteger _totalAmount, String _describtion, BigInteger _creationDate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalAmount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_describtion),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_creationDate)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyInvoice(byte[] _InvoiceId, BigInteger _totalAmount, String _describtion, BigInteger _creationDate) {
        final Function function = new Function(
                FUNC_MODIFYINVOICE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(_InvoiceId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalAmount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_describtion),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_creationDate)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<byte[], BigInteger, String, BigInteger> getModifyInvoiceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYINVOICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<byte[], BigInteger, String, BigInteger>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public String payers(String param0) throws ContractException {
        final Function function = new Function(FUNC_PAYERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public byte[] reimbursementRequests(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_REIMBURSEMENTREQUESTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public static TaxContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TaxContract(contractAddress, client, credential);
    }

    public static TaxContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(TaxContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InvoiceInfo extends DynamicStruct {
        public String creator;

        public String recipient;

        public BigInteger totalAmount;

        public String description;

        public BigInteger creationDate;

        public BigInteger dueDate;

        public BigInteger status;

        public String auditInfo;

        public InvoiceInfo(Address creator, Address recipient, Uint256 totalAmount, Utf8String description, Uint256 creationDate, Uint256 dueDate, Uint8 status, Utf8String auditInfo) {
            super(creator,recipient,totalAmount,description,creationDate,dueDate,status,auditInfo);
            this.creator = creator.getValue();
            this.recipient = recipient.getValue();
            this.totalAmount = totalAmount.getValue();
            this.description = description.getValue();
            this.creationDate = creationDate.getValue();
            this.dueDate = dueDate.getValue();
            this.status = status.getValue();
            this.auditInfo = auditInfo.getValue();
        }

        public InvoiceInfo(String creator, String recipient, BigInteger totalAmount, String description, BigInteger creationDate, BigInteger dueDate, BigInteger status, String auditInfo) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Address(creator),new org.fisco.bcos.sdk.abi.datatypes.Address(recipient),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(totalAmount),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(creationDate),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(dueDate),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auditInfo));
            this.creator = creator;
            this.recipient = recipient;
            this.totalAmount = totalAmount;
            this.description = description;
            this.creationDate = creationDate;
            this.dueDate = dueDate;
            this.status = status;
            this.auditInfo = auditInfo;
        }
    }
}